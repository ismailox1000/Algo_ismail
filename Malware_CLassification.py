# -*- coding: utf-8 -*-
"""
Created on Wed Dec 21 02:00:38 2022

@author: is-os
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv('MalwareData.csv',sep='|')
df.head(5)
df.describe()
df.info()
df.shape

df.isnull()
good=df[0:41323].drop(['legitimate'],axis=1)
bad=df[41323::].drop(['legitimate'],axis=1)
 
    
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.hist(df[ "legitimate" ],20)
plt.show()

y=df['legitimate']
df=df.drop(['Name'],axis=1)
df=df.drop(['md5'],axis=1)

df=df.drop(['legitimate'],axis=1)
X=df
from sklearn.preprocessing import StandardScaler
std=StandardScaler()
X=std.fit_transform(df)


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)
X_train.shape
import sklearn

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
classifier1 = RandomForestClassifier(max_depth=2, random_state=0)
RandModel=classifier1.fit(X_train, y_train)
y_train_pred=RandModel.predict(X_train)
y_pred=RandModel.predict(X_test)

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
accuracy_score(y_train, y_train_pred)
accuracy_score(y_test, y_pred)
print('accuracy score for RF algorithm is:',accuracy_score(y_test, y_pred))
RF_cm = confusion_matrix(y_test, y_pred)




from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0)
logModel=clf.fit(X_train, y_train)
train_log=logModel.predict(X_train)    
pred=logModel.predict(X_test)

accuracy_score(y_train,train_log)
accuracy_score(y_test,pred)
print('accuracy score for LR algorithm is:',accuracy_score(y_test,pred))
LR_cm = confusion_matrix(y_test, pred)



import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
model= Sequential()
model.add(Dense(16, input_dim=54, activation= "relu"))
model.add(Dense(8, activation= "relu"))
model.add(Dense(4, activation= "relu"))
model.add(Dense(1, activation='sigmoid'))
model.summary() #Print model Summary
model.compile(loss= "binary_crossentropy" , optimizer="rmsprop", metrics=["accuracy"])
model.fit(X_train, y_train, epochs=5, batch_size=32)
trainPred=model.predict(X_train)
trainPred=[1 if y>= 0.5 else 0 for y in trainPred]
accuracy_score(y_train,trainPred)
y_prediction=model.predict(X_test)
y_prediction=[1 if y>= 0.5 else 0 for y in y_prediction]

accuracy_score(y_test, y_prediction)
print('accuracy score for ANN algorithm is:',accuracy_score(y_test, y_prediction))
ANN_cm= confusion_matrix(y_test, y_prediction)

 








